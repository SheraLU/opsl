//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: codeDcps.h
//  Source: codeDcps.idl
//  Generated: Tue Oct 30 22:02:02 2018
//  OpenSplice 6.7.180404OSS
//  
//******************************************************************
#ifndef _CODEDCPS_H_
#define _CODEDCPS_H_

#include "sacpp_mapping.h"
#include "dds_dcps.h"
#include "code.h"


namespace CodeData
{

   class CodeTypeSupportInterface;

   typedef CodeTypeSupportInterface * CodeTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < CodeTypeSupportInterface> CodeTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < CodeTypeSupportInterface> CodeTypeSupportInterface_out;


   class CodeDataWriter;

   typedef CodeDataWriter * CodeDataWriter_ptr;
   typedef DDS_DCPSInterface_var < CodeDataWriter> CodeDataWriter_var;
   typedef DDS_DCPSInterface_out < CodeDataWriter> CodeDataWriter_out;


   class CodeDataReader;

   typedef CodeDataReader * CodeDataReader_ptr;
   typedef DDS_DCPSInterface_var < CodeDataReader> CodeDataReader_var;
   typedef DDS_DCPSInterface_out < CodeDataReader> CodeDataReader_out;


   class CodeDataReaderView;

   typedef CodeDataReaderView * CodeDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < CodeDataReaderView> CodeDataReaderView_var;
   typedef DDS_DCPSInterface_out < CodeDataReaderView> CodeDataReaderView_out;

   struct CodeSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Code, struct CodeSeq_uniq_> CodeSeq;
   typedef DDS_DCPSSequence_var < CodeSeq> CodeSeq_var;
   typedef DDS_DCPSSequence_out < CodeSeq> CodeSeq_out;
   class CodeTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef CodeTypeSupportInterface_ptr _ptr_type;
      typedef CodeTypeSupportInterface_var _var_type;

      static CodeTypeSupportInterface_ptr _duplicate (CodeTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static CodeTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static CodeTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static CodeTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      CodeTypeSupportInterface_ptr _this () { return this; }


   protected:
      CodeTypeSupportInterface () {};
      ~CodeTypeSupportInterface () {};
   private:
      CodeTypeSupportInterface (const CodeTypeSupportInterface &);
      CodeTypeSupportInterface & operator = (const CodeTypeSupportInterface &);
   };

   class CodeDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef CodeDataWriter_ptr _ptr_type;
      typedef CodeDataWriter_var _var_type;

      static CodeDataWriter_ptr _duplicate (CodeDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static CodeDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static CodeDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static CodeDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      CodeDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Code& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Code& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Code& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Code& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Code& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Code& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Code& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Code& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Code& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Code& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Code& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Code& instance_data) = 0;

   protected:
      CodeDataWriter () {};
      ~CodeDataWriter () {};
   private:
      CodeDataWriter (const CodeDataWriter &);
      CodeDataWriter & operator = (const CodeDataWriter &);
   };

   class CodeDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef CodeDataReader_ptr _ptr_type;
      typedef CodeDataReader_var _var_type;

      static CodeDataReader_ptr _duplicate (CodeDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static CodeDataReader_ptr _narrow (DDS::Object_ptr obj);
      static CodeDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static CodeDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      CodeDataReader_ptr _this () { return this; }

      virtual DDS::Long read (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Code& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Code& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Code& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Code& instance) = 0;

   protected:
      CodeDataReader () {};
      ~CodeDataReader () {};
   private:
      CodeDataReader (const CodeDataReader &);
      CodeDataReader & operator = (const CodeDataReader &);
   };

   class CodeDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef CodeDataReaderView_ptr _ptr_type;
      typedef CodeDataReaderView_var _var_type;

      static CodeDataReaderView_ptr _duplicate (CodeDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static CodeDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static CodeDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static CodeDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      CodeDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Code& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Code& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (CodeSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Code& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Code& instance) = 0;

   protected:
      CodeDataReaderView () {};
      ~CodeDataReaderView () {};
   private:
      CodeDataReaderView (const CodeDataReaderView &);
      CodeDataReaderView & operator = (const CodeDataReaderView &);
   };

}




#endif
